/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/driverscreen_screen/DriverScreenViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include<images/SVGDatabase.hpp>

DriverScreenViewBase::DriverScreenViewBase() :
    frameCountUpdateDriverDataInterval(0)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setPosition(0, 0, 480, 272);
    background.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    add(background);

    tbRightDataFieldData3.setPosition(190, 161, 100, 37);
    tbRightDataFieldData3.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    tbRightDataFieldData3.setLinespacing(0);
    Unicode::snprintf(tbRightDataFieldData3Buffer, TBRIGHTDATAFIELDDATA3_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_S3HT).getText());
    tbRightDataFieldData3.setWildcard(tbRightDataFieldData3Buffer);
    tbRightDataFieldData3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6GAE));
    add(tbRightDataFieldData3);

    tbRightDataFieldData2.setPosition(420, 75, 50, 37);
    tbRightDataFieldData2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    tbRightDataFieldData2.setLinespacing(0);
    Unicode::snprintf(tbRightDataFieldData2Buffer, TBRIGHTDATAFIELDDATA2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8X86).getText());
    tbRightDataFieldData2.setWildcard(tbRightDataFieldData2Buffer);
    tbRightDataFieldData2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SNGL));
    add(tbRightDataFieldData2);

    tbRightDataFieldTitle2.setPosition(370, 60, 100, 15);
    tbRightDataFieldTitle2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    tbRightDataFieldTitle2.setLinespacing(2);
    Unicode::snprintf(tbRightDataFieldTitle2Buffer, TBRIGHTDATAFIELDTITLE2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_D87B).getText());
    tbRightDataFieldTitle2.setWildcard(tbRightDataFieldTitle2Buffer);
    tbRightDataFieldTitle2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_C0Q3));
    add(tbRightDataFieldTitle2);

    tbRightDataFieldData1.setPosition(390, 25, 80, 30);
    tbRightDataFieldData1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    tbRightDataFieldData1.setLinespacing(0);
    Unicode::snprintf(tbRightDataFieldData1Buffer, TBRIGHTDATAFIELDDATA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_HHZ7).getText());
    tbRightDataFieldData1.setWildcard(tbRightDataFieldData1Buffer);
    tbRightDataFieldData1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7UI3));
    add(tbRightDataFieldData1);

    tbRightDataFieldTitle1.setPosition(370, 10, 100, 18);
    tbRightDataFieldTitle1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    tbRightDataFieldTitle1.setLinespacing(2);
    Unicode::snprintf(tbRightDataFieldTitle1Buffer, TBRIGHTDATAFIELDTITLE1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_EHLI).getText());
    tbRightDataFieldTitle1.setWildcard(tbRightDataFieldTitle1Buffer);
    tbRightDataFieldTitle1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4UEX));
    add(tbRightDataFieldTitle1);

    tbLeftDataFieldData2.setPosition(10, 75, 80, 37);
    tbLeftDataFieldData2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    tbLeftDataFieldData2.setLinespacing(0);
    Unicode::snprintf(tbLeftDataFieldData2Buffer, TBLEFTDATAFIELDDATA2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1YET).getText());
    tbLeftDataFieldData2.setWildcard(tbLeftDataFieldData2Buffer);
    tbLeftDataFieldData2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YSFT));
    add(tbLeftDataFieldData2);

    tbLeftDataFieldTitle2.setXY(10, 60);
    tbLeftDataFieldTitle2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    tbLeftDataFieldTitle2.setLinespacing(2);
    Unicode::snprintf(tbLeftDataFieldTitle2Buffer, TBLEFTDATAFIELDTITLE2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_E4NJ).getText());
    tbLeftDataFieldTitle2.setWildcard(tbLeftDataFieldTitle2Buffer);
    tbLeftDataFieldTitle2.resizeToCurrentText();
    tbLeftDataFieldTitle2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JPBU));
    add(tbLeftDataFieldTitle2);

    tbLeftDataFieldData1.setPosition(10, 25, 80, 37);
    tbLeftDataFieldData1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    tbLeftDataFieldData1.setLinespacing(0);
    Unicode::snprintf(tbLeftDataFieldData1Buffer, TBLEFTDATAFIELDDATA1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_V86A).getText());
    tbLeftDataFieldData1.setWildcard(tbLeftDataFieldData1Buffer);
    tbLeftDataFieldData1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2BPK));
    add(tbLeftDataFieldData1);

    tbLeftDataFieldTitle1.setPosition(10, 10, 100, 21);
    tbLeftDataFieldTitle1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    tbLeftDataFieldTitle1.setLinespacing(2);
    Unicode::snprintf(tbLeftDataFieldTitle1Buffer, TBLEFTDATAFIELDTITLE1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8NEG).getText());
    tbLeftDataFieldTitle1.setWildcard(tbLeftDataFieldTitle1Buffer);
    tbLeftDataFieldTitle1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3UGH));
    add(tbLeftDataFieldTitle1);

    tbGear.setPosition(200, 10, 80, 150);
    tbGear.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    tbGear.setLinespacing(0);
    Unicode::snprintf(tbGearBuffer, TBGEAR_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ZWYE).getText());
    tbGear.setWildcard(tbGearBuffer);
    tbGear.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3P2N));
    add(tbGear);

    imageSRLogo.setSVG(SVG_SCHULICH_RACING_LOGO_ID);
    imageSRLogo.setPosition(160, 238, 160, 40);
    imageSRLogo.setScale(0.33f, 0.41f);
    imageSRLogo.setImagePosition(0, 0);
    imageSRLogo.setRotationCenter(80, 20);
    imageSRLogo.setRotation(0);
    add(imageSRLogo);

    tbRPM.setPosition(190, 0, 100, 37);
    tbRPM.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    tbRPM.setLinespacing(0);
    Unicode::snprintf(tbRPMBuffer, TBRPM_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_GPKS).getText());
    tbRPM.setWildcard(tbRPMBuffer);
    tbRPM.setTypedText(touchgfx::TypedText(T___SINGLEUSE_O779));
    add(tbRPM);

    tbLapTimer.setPosition(175, 198, 130, 40);
    tbLapTimer.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    tbLapTimer.setLinespacing(0);
    touchgfx::Unicode::snprintf(tbLapTimerBuffer1, TBLAPTIMERBUFFER1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_QVM8).getText());
    tbLapTimer.setWildcard1(tbLapTimerBuffer1);
    touchgfx::Unicode::snprintf(tbLapTimerBuffer2, TBLAPTIMERBUFFER2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_3GYF).getText());
    tbLapTimer.setWildcard2(tbLapTimerBuffer2);
    tbLapTimer.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JF0O));
    add(tbLapTimer);
}

DriverScreenViewBase::~DriverScreenViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void DriverScreenViewBase::setupScreen()
{

}

void DriverScreenViewBase::handleKeyEvent(uint8_t key)
{
    if(0 == key)
    {
        //ChangeToPowerTrain
        //When hardware button 0 clicked change screen to PowerTrainScreen
        //Go to PowerTrainScreen with no screen transition
        application().gotoPowerTrainScreenScreenNoTransition();
    
    }
}

void DriverScreenViewBase::handleTickEvent()
{
    frameCountUpdateDriverDataInterval++;
    if(frameCountUpdateDriverDataInterval == TICK_UPDATEDRIVERDATA_INTERVAL)
    {
        //UpdateDriverData
        //When every N tick call virtual function
        //Call UpdateDriverScreen
        UpdateDriverScreen();
        frameCountUpdateDriverDataInterval = 0;
    }
}
