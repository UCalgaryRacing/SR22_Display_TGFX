/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef DRIVERSCREENVIEWBASE_HPP
#define DRIVERSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/driverscreen_screen/DriverScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/SVGImage.hpp>

class DriverScreenViewBase : public touchgfx::View<DriverScreenPresenter>
{
public:
    DriverScreenViewBase();
    virtual ~DriverScreenViewBase();
    virtual void setupScreen();
    virtual void handleKeyEvent(uint8_t key);
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void UpdateDriverScreen()
    {
        // Override and implement this function in DriverScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box background;
    touchgfx::TextAreaWithOneWildcard tbRightDataFieldData3;
    touchgfx::TextAreaWithOneWildcard tbRightDataFieldData2;
    touchgfx::TextAreaWithOneWildcard tbRightDataFieldTitle2;
    touchgfx::TextAreaWithOneWildcard tbRightDataFieldData1;
    touchgfx::TextAreaWithOneWildcard tbRightDataFieldTitle1;
    touchgfx::TextAreaWithOneWildcard tbLeftDataFieldData2;
    touchgfx::TextAreaWithOneWildcard tbLeftDataFieldTitle2;
    touchgfx::TextAreaWithOneWildcard tbLeftDataFieldData1;
    touchgfx::TextAreaWithOneWildcard tbLeftDataFieldTitle1;
    touchgfx::TextAreaWithOneWildcard tbGear;
    touchgfx::SVGImage imageSRLogo;
    touchgfx::TextAreaWithOneWildcard tbRPM;
    touchgfx::TextAreaWithTwoWildcards tbLapTimer;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TBRIGHTDATAFIELDDATA3_SIZE = 10;
    touchgfx::Unicode::UnicodeChar tbRightDataFieldData3Buffer[TBRIGHTDATAFIELDDATA3_SIZE];
    static const uint16_t TBRIGHTDATAFIELDDATA2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar tbRightDataFieldData2Buffer[TBRIGHTDATAFIELDDATA2_SIZE];
    static const uint16_t TBRIGHTDATAFIELDTITLE2_SIZE = 20;
    touchgfx::Unicode::UnicodeChar tbRightDataFieldTitle2Buffer[TBRIGHTDATAFIELDTITLE2_SIZE];
    static const uint16_t TBRIGHTDATAFIELDDATA1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar tbRightDataFieldData1Buffer[TBRIGHTDATAFIELDDATA1_SIZE];
    static const uint16_t TBRIGHTDATAFIELDTITLE1_SIZE = 20;
    touchgfx::Unicode::UnicodeChar tbRightDataFieldTitle1Buffer[TBRIGHTDATAFIELDTITLE1_SIZE];
    static const uint16_t TBLEFTDATAFIELDDATA2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar tbLeftDataFieldData2Buffer[TBLEFTDATAFIELDDATA2_SIZE];
    static const uint16_t TBLEFTDATAFIELDTITLE2_SIZE = 20;
    touchgfx::Unicode::UnicodeChar tbLeftDataFieldTitle2Buffer[TBLEFTDATAFIELDTITLE2_SIZE];
    static const uint16_t TBLEFTDATAFIELDDATA1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar tbLeftDataFieldData1Buffer[TBLEFTDATAFIELDDATA1_SIZE];
    static const uint16_t TBLEFTDATAFIELDTITLE1_SIZE = 20;
    touchgfx::Unicode::UnicodeChar tbLeftDataFieldTitle1Buffer[TBLEFTDATAFIELDTITLE1_SIZE];
    static const uint16_t TBGEAR_SIZE = 10;
    touchgfx::Unicode::UnicodeChar tbGearBuffer[TBGEAR_SIZE];
    static const uint16_t TBRPM_SIZE = 10;
    touchgfx::Unicode::UnicodeChar tbRPMBuffer[TBRPM_SIZE];
    static const uint16_t TBLAPTIMERBUFFER1_SIZE = 5;
    touchgfx::Unicode::UnicodeChar tbLapTimerBuffer1[TBLAPTIMERBUFFER1_SIZE];
    static const uint16_t TBLAPTIMERBUFFER2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar tbLapTimerBuffer2[TBLAPTIMERBUFFER2_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 10000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Tick Counter Declarations
     */
    static const uint32_t TICK_UPDATEDRIVERDATA_INTERVAL = 2;
    uint32_t frameCountUpdateDriverDataInterval;

};

#endif // DRIVERSCREENVIEWBASE_HPP
